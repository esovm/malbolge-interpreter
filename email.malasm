//
// Sample Malbolge Program displays my email address.
//
// author: Miklos Sagi, 20th May, 2015
//

// The very first thing to be done is to separate code and data 'segments'.

MOV C, [D] //this jumps to address 98 which is one byte in front of the 'new code
           //segment' start

// The following operations up until address 98 could be misleading. They are not real
// operations just data used to reach the desired value in the A register.

ROTR [D]; MOV A, [D] // *
MOV C, [D] // i
NOP // o
NOP // o
EXIT // v
NOP // o
NOP // o
NOP // o
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
ROTR [D]; MOV A, [D] // *
NOP // o
EXIT // v
EXIT // v
NOP // o
NOP // o
IN A // /
NOP // o
MOV C, [D] // i
NOP // o
NOP // o
CRZ A, [D]; MOV A, [D] // p
ROTR [D]; MOV A, [D] // *
OUT A // <
NOP // o
CRZ A, [D]; MOV A, [D] // p
MOV C, [D] // i
ROTR [D]; MOV A, [D] // *
NOP // o
EXIT // v
MOV D, [D] // j
NOP // o
ROTR [D]; MOV A, [D] // *
MOV C, [D] // i
NOP // o
OUT A // <
MOV C, [D] // i
NOP // o
IN A // /
EXIT // v
NOP // o
OUT A // <
OUT A // <
NOP // o
NOP // o
NOP // o
NOP // o
EXIT // v
IN A // /
MOV C, [D] // i
NOP // o
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
NOP // o
NOP // o
NOP // o
MOV C, [D] // i
MOV D, [D] // j
EXIT // v
NOP // o
IN A // /
ROTR [D]; MOV A, [D] // *
NOP // o
MOV C, [D] //i
ROTR [D]; MOV A, [D] // *
MOV C, [D] // i
NOP // o
CRZ A, [D]; MOV A, [D] // p
EXIT // v
NOP // o
NOP // o
NOP // o
ROTR [D]; MOV A, [D] // *
ROTR [D]; MOV A, [D] // *
NOP // o
IN A // /
IN A // /
NOP // o
IN A // /
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
NOP // o
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused
NOP // o padding: unused

//address 98, the very first jump operation lands here, encrypts this byte and
//      moves on to the next op which is the 
EXIT // v
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
ROTR [D]; MOV A, [D] // *
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
ROTR [D]; MOV A, [D] // *
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
ROTR [D]; MOV A, [D] // *
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
OUT A // <
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
NOP // o padding: this byte is unused: the desired byte is unreachable from this address
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
ROTR [D]; MOV A, [D] // *
CRZ A, [D]; MOV A, [D] // p
CRZ A, [D]; MOV A, [D] // p
OUT A // <
EXIT
